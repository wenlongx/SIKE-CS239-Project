[2019-12-07 00:08:50,095] INFO SchemaRegistryConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	avro.compatibility.level = backward
	compression.enable = true
	debug = false
	host.name = kaushik-HP
	idle.timeout.ms = 30000
	inter.instance.headers.whitelist = []
	inter.instance.protocol = http
	kafkastore.bootstrap.servers = []
	kafkastore.connection.url = localhost:2181
	kafkastore.group.id = 
	kafkastore.init.timeout.ms = 60000
	kafkastore.sasl.kerberos.kinit.cmd = /usr/bin/kinit
	kafkastore.sasl.kerberos.min.time.before.relogin = 60000
	kafkastore.sasl.kerberos.service.name = 
	kafkastore.sasl.kerberos.ticket.renew.jitter = 0.05
	kafkastore.sasl.kerberos.ticket.renew.window.factor = 0.8
	kafkastore.sasl.mechanism = GSSAPI
	kafkastore.security.protocol = PLAINTEXT
	kafkastore.ssl.cipher.suites = 
	kafkastore.ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1
	kafkastore.ssl.endpoint.identification.algorithm = 
	kafkastore.ssl.key.password = [hidden]
	kafkastore.ssl.keymanager.algorithm = SunX509
	kafkastore.ssl.keystore.location = 
	kafkastore.ssl.keystore.password = [hidden]
	kafkastore.ssl.keystore.type = JKS
	kafkastore.ssl.protocol = TLS
	kafkastore.ssl.provider = 
	kafkastore.ssl.trustmanager.algorithm = PKIX
	kafkastore.ssl.truststore.location = 
	kafkastore.ssl.truststore.password = [hidden]
	kafkastore.ssl.truststore.type = JKS
	kafkastore.timeout.ms = 500
	kafkastore.topic = _schemas
	kafkastore.topic.replication.factor = 3
	kafkastore.zk.session.timeout.ms = 30000
	listeners = [http://0.0.0.0:8081]
	master.eligibility = true
	metric.reporters = []
	metrics.jmx.prefix = kafka.schema.registry
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	mode.mutability = false
	port = 8081
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.class = []
	resource.extension.classes = []
	resource.static.locations = []
	response.mediatype.default = application/vnd.schemaregistry.v1+json
	response.mediatype.preferred = [application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json]
	rest.servlet.initializor.classes = []
	schema.registry.group.id = schema-registry
	schema.registry.inter.instance.protocol = 
	schema.registry.resource.extension.class = []
	schema.registry.zk.namespace = schema_registry
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
	zookeeper.set.acl = false
 (io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig)
[2019-12-07 00:08:50,130] INFO Logging initialized @432ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log)
[2019-12-07 00:09:20,863] ERROR Server died unexpectedly:  (io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain)
org.I0Itec.zkclient.exception.ZkTimeoutException: Unable to connect to zookeeper server 'localhost:2181' with timeout of 30000 ms
	at org.I0Itec.zkclient.ZkClient.connect(ZkClient.java:1233)
	at org.I0Itec.zkclient.ZkClient.<init>(ZkClient.java:157)
	at org.I0Itec.zkclient.ZkClient.<init>(ZkClient.java:131)
	at kafka.utils.ZkUtils$.createZkClientAndConnection(ZkUtils.scala:93)
	at kafka.utils.ZkUtils$.apply(ZkUtils.scala:75)
	at kafka.utils.ZkUtils.apply(ZkUtils.scala)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig.zkUtils(SchemaRegistryConfig.java:695)
	at io.confluent.kafka.schemaregistry.id.ZookeeperIdGenerator.configure(ZookeeperIdGenerator.java:65)
	at io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry.identityGenerator(KafkaSchemaRegistry.java:182)
	at io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry.<init>(KafkaSchemaRegistry.java:138)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication.initSchemaRegistry(SchemaRegistryRestApplication.java:62)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication.configureBaseApplication(SchemaRegistryRestApplication.java:81)
	at io.confluent.rest.Application.createServer(Application.java:205)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain.main(SchemaRegistryMain.java:42)
[2019-12-07 00:54:51,430] INFO SchemaRegistryConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	avro.compatibility.level = backward
	compression.enable = true
	debug = false
	host.name = kaushik-HP
	idle.timeout.ms = 30000
	inter.instance.headers.whitelist = []
	inter.instance.protocol = http
	kafkastore.bootstrap.servers = []
	kafkastore.connection.url = localhost:2181
	kafkastore.group.id = 
	kafkastore.init.timeout.ms = 60000
	kafkastore.sasl.kerberos.kinit.cmd = /usr/bin/kinit
	kafkastore.sasl.kerberos.min.time.before.relogin = 60000
	kafkastore.sasl.kerberos.service.name = 
	kafkastore.sasl.kerberos.ticket.renew.jitter = 0.05
	kafkastore.sasl.kerberos.ticket.renew.window.factor = 0.8
	kafkastore.sasl.mechanism = GSSAPI
	kafkastore.security.protocol = PLAINTEXT
	kafkastore.ssl.cipher.suites = 
	kafkastore.ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1
	kafkastore.ssl.endpoint.identification.algorithm = 
	kafkastore.ssl.key.password = [hidden]
	kafkastore.ssl.keymanager.algorithm = SunX509
	kafkastore.ssl.keystore.location = 
	kafkastore.ssl.keystore.password = [hidden]
	kafkastore.ssl.keystore.type = JKS
	kafkastore.ssl.protocol = TLS
	kafkastore.ssl.provider = 
	kafkastore.ssl.trustmanager.algorithm = PKIX
	kafkastore.ssl.truststore.location = 
	kafkastore.ssl.truststore.password = [hidden]
	kafkastore.ssl.truststore.type = JKS
	kafkastore.timeout.ms = 500
	kafkastore.topic = _schemas
	kafkastore.topic.replication.factor = 3
	kafkastore.zk.session.timeout.ms = 30000
	listeners = [http://0.0.0.0:8081]
	master.eligibility = true
	metric.reporters = []
	metrics.jmx.prefix = kafka.schema.registry
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	mode.mutability = false
	port = 8081
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.class = []
	resource.extension.classes = []
	resource.static.locations = []
	response.mediatype.default = application/vnd.schemaregistry.v1+json
	response.mediatype.preferred = [application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json]
	rest.servlet.initializor.classes = []
	schema.registry.group.id = schema-registry
	schema.registry.inter.instance.protocol = 
	schema.registry.resource.extension.class = []
	schema.registry.zk.namespace = schema_registry
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
	zookeeper.set.acl = false
 (io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig)
[2019-12-07 00:54:51,476] INFO Logging initialized @401ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log)
[2019-12-07 00:54:52,514] INFO Created schema registry namespace localhost:2181 /schema_registry (io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig)
[2019-12-07 00:54:52,636] INFO Initializing KafkaStore with broker endpoints: PLAINTEXT://kaushik-HP:9092 (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 00:54:52,816] INFO Creating schemas topic _schemas (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 00:54:52,818] WARN Creating the schema topic _schemas using a replication factor of 1, which is less than the desired one of 3. If this is a production environment, it's crucial to add more brokers and increase the replication factor of the topic. (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 00:54:53,161] INFO Kafka store reader thread starting consumer (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 00:54:53,239] INFO Initialized last consumed offset to -1 (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 00:54:53,242] INFO [kafka-store-reader-thread-_schemas]: Starting (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 00:54:53,440] ERROR Error starting the schema registry (io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication)
io.confluent.kafka.schemaregistry.exceptions.SchemaRegistryInitializationException: Error initializing kafka store while initializing schema registry
	at io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry.init(KafkaSchemaRegistry.java:224)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication.initSchemaRegistry(SchemaRegistryRestApplication.java:66)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication.configureBaseApplication(SchemaRegistryRestApplication.java:81)
	at io.confluent.rest.Application.createServer(Application.java:205)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain.main(SchemaRegistryMain.java:42)
Caused by: io.confluent.kafka.schemaregistry.storage.exceptions.StoreInitializationException: io.confluent.kafka.schemaregistry.storage.exceptions.StoreException: Failed to write Noop record to kafka store.
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.init(KafkaStore.java:142)
	at io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry.init(KafkaSchemaRegistry.java:222)
	... 4 more
Caused by: io.confluent.kafka.schemaregistry.storage.exceptions.StoreException: Failed to write Noop record to kafka store.
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.getLatestOffset(KafkaStore.java:439)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.waitUntilKafkaReaderReachesLastOffset(KafkaStore.java:281)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.init(KafkaStore.java:140)
	... 5 more
Caused by: java.util.concurrent.ExecutionException: org.apache.kafka.common.errors.NotLeaderForPartitionException: This server is not the leader for that topic-partition.
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.valueOrError(FutureRecordMetadata.java:98)
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.get(FutureRecordMetadata.java:81)
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.get(FutureRecordMetadata.java:30)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.getLatestOffset(KafkaStore.java:434)
	... 7 more
Caused by: org.apache.kafka.common.errors.NotLeaderForPartitionException: This server is not the leader for that topic-partition.
[2019-12-07 00:57:07,383] INFO SchemaRegistryConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	avro.compatibility.level = backward
	compression.enable = true
	debug = false
	host.name = kaushik-HP
	idle.timeout.ms = 30000
	inter.instance.headers.whitelist = []
	inter.instance.protocol = http
	kafkastore.bootstrap.servers = []
	kafkastore.connection.url = localhost:2181
	kafkastore.group.id = 
	kafkastore.init.timeout.ms = 60000
	kafkastore.sasl.kerberos.kinit.cmd = /usr/bin/kinit
	kafkastore.sasl.kerberos.min.time.before.relogin = 60000
	kafkastore.sasl.kerberos.service.name = 
	kafkastore.sasl.kerberos.ticket.renew.jitter = 0.05
	kafkastore.sasl.kerberos.ticket.renew.window.factor = 0.8
	kafkastore.sasl.mechanism = GSSAPI
	kafkastore.security.protocol = PLAINTEXT
	kafkastore.ssl.cipher.suites = 
	kafkastore.ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1
	kafkastore.ssl.endpoint.identification.algorithm = 
	kafkastore.ssl.key.password = [hidden]
	kafkastore.ssl.keymanager.algorithm = SunX509
	kafkastore.ssl.keystore.location = 
	kafkastore.ssl.keystore.password = [hidden]
	kafkastore.ssl.keystore.type = JKS
	kafkastore.ssl.protocol = TLS
	kafkastore.ssl.provider = 
	kafkastore.ssl.trustmanager.algorithm = PKIX
	kafkastore.ssl.truststore.location = 
	kafkastore.ssl.truststore.password = [hidden]
	kafkastore.ssl.truststore.type = JKS
	kafkastore.timeout.ms = 500
	kafkastore.topic = _schemas
	kafkastore.topic.replication.factor = 3
	kafkastore.zk.session.timeout.ms = 30000
	listeners = [http://0.0.0.0:8081]
	master.eligibility = true
	metric.reporters = []
	metrics.jmx.prefix = kafka.schema.registry
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	mode.mutability = false
	port = 8081
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.class = []
	resource.extension.classes = []
	resource.static.locations = []
	response.mediatype.default = application/vnd.schemaregistry.v1+json
	response.mediatype.preferred = [application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json]
	rest.servlet.initializor.classes = []
	schema.registry.group.id = schema-registry
	schema.registry.inter.instance.protocol = 
	schema.registry.resource.extension.class = []
	schema.registry.zk.namespace = schema_registry
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
	zookeeper.set.acl = false
 (io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig)
[2019-12-07 00:57:07,417] INFO Logging initialized @378ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log)
[2019-12-07 00:57:08,007] INFO Created schema registry namespace localhost:2181 /schema_registry (io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig)
[2019-12-07 00:57:08,114] INFO Initializing KafkaStore with broker endpoints: PLAINTEXT://kaushik-HP:9092 (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 00:57:08,320] INFO Validating schemas topic _schemas (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 00:57:08,328] WARN The replication factor of the schema topic _schemas is less than the desired one of 3. If this is a production environment, it's crucial to add more brokers and increase the replication factor of the topic. (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 00:57:08,381] INFO Kafka store reader thread starting consumer (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 00:57:08,428] INFO Initialized last consumed offset to -1 (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 00:57:08,429] INFO [kafka-store-reader-thread-_schemas]: Starting (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 00:57:08,510] ERROR Error starting the schema registry (io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication)
io.confluent.kafka.schemaregistry.exceptions.SchemaRegistryInitializationException: Error initializing kafka store while initializing schema registry
	at io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry.init(KafkaSchemaRegistry.java:224)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication.initSchemaRegistry(SchemaRegistryRestApplication.java:66)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication.configureBaseApplication(SchemaRegistryRestApplication.java:81)
	at io.confluent.rest.Application.createServer(Application.java:205)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain.main(SchemaRegistryMain.java:42)
Caused by: io.confluent.kafka.schemaregistry.storage.exceptions.StoreInitializationException: io.confluent.kafka.schemaregistry.storage.exceptions.StoreException: Failed to write Noop record to kafka store.
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.init(KafkaStore.java:142)
	at io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry.init(KafkaSchemaRegistry.java:222)
	... 4 more
Caused by: io.confluent.kafka.schemaregistry.storage.exceptions.StoreException: Failed to write Noop record to kafka store.
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.getLatestOffset(KafkaStore.java:439)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.waitUntilKafkaReaderReachesLastOffset(KafkaStore.java:281)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.init(KafkaStore.java:140)
	... 5 more
Caused by: java.util.concurrent.ExecutionException: org.apache.kafka.common.errors.NotLeaderForPartitionException: This server is not the leader for that topic-partition.
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.valueOrError(FutureRecordMetadata.java:98)
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.get(FutureRecordMetadata.java:81)
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.get(FutureRecordMetadata.java:30)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.getLatestOffset(KafkaStore.java:434)
	... 7 more
Caused by: org.apache.kafka.common.errors.NotLeaderForPartitionException: This server is not the leader for that topic-partition.
[2019-12-07 01:02:48,510] INFO SchemaRegistryConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	avro.compatibility.level = backward
	compression.enable = true
	debug = false
	host.name = kaushik-HP
	idle.timeout.ms = 30000
	inter.instance.headers.whitelist = []
	inter.instance.protocol = http
	kafkastore.bootstrap.servers = []
	kafkastore.connection.url = localhost:2181
	kafkastore.group.id = 
	kafkastore.init.timeout.ms = 60000
	kafkastore.sasl.kerberos.kinit.cmd = /usr/bin/kinit
	kafkastore.sasl.kerberos.min.time.before.relogin = 60000
	kafkastore.sasl.kerberos.service.name = 
	kafkastore.sasl.kerberos.ticket.renew.jitter = 0.05
	kafkastore.sasl.kerberos.ticket.renew.window.factor = 0.8
	kafkastore.sasl.mechanism = GSSAPI
	kafkastore.security.protocol = PLAINTEXT
	kafkastore.ssl.cipher.suites = 
	kafkastore.ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1
	kafkastore.ssl.endpoint.identification.algorithm = 
	kafkastore.ssl.key.password = [hidden]
	kafkastore.ssl.keymanager.algorithm = SunX509
	kafkastore.ssl.keystore.location = 
	kafkastore.ssl.keystore.password = [hidden]
	kafkastore.ssl.keystore.type = JKS
	kafkastore.ssl.protocol = TLS
	kafkastore.ssl.provider = 
	kafkastore.ssl.trustmanager.algorithm = PKIX
	kafkastore.ssl.truststore.location = 
	kafkastore.ssl.truststore.password = [hidden]
	kafkastore.ssl.truststore.type = JKS
	kafkastore.timeout.ms = 500
	kafkastore.topic = _schemas
	kafkastore.topic.replication.factor = 3
	kafkastore.zk.session.timeout.ms = 30000
	listeners = [http://0.0.0.0:8081]
	master.eligibility = true
	metric.reporters = []
	metrics.jmx.prefix = kafka.schema.registry
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	mode.mutability = false
	port = 8081
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.class = []
	resource.extension.classes = []
	resource.static.locations = []
	response.mediatype.default = application/vnd.schemaregistry.v1+json
	response.mediatype.preferred = [application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json]
	rest.servlet.initializor.classes = []
	schema.registry.group.id = schema-registry
	schema.registry.inter.instance.protocol = 
	schema.registry.resource.extension.class = []
	schema.registry.zk.namespace = schema_registry
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
	zookeeper.set.acl = false
 (io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig)
[2019-12-07 01:02:48,544] INFO Logging initialized @396ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log)
[2019-12-07 01:02:49,164] INFO Created schema registry namespace localhost:2181 /schema_registry (io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig)
[2019-12-07 01:02:49,295] INFO Initializing KafkaStore with broker endpoints: PLAINTEXT://kaushik-HP:9092 (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 01:02:49,493] INFO Validating schemas topic _schemas (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 01:02:49,502] WARN The replication factor of the schema topic _schemas is less than the desired one of 3. If this is a production environment, it's crucial to add more brokers and increase the replication factor of the topic. (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 01:02:49,542] INFO Kafka store reader thread starting consumer (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 01:02:49,583] INFO Initialized last consumed offset to -1 (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 01:02:49,584] INFO [kafka-store-reader-thread-_schemas]: Starting (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 01:02:49,663] ERROR Error starting the schema registry (io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication)
io.confluent.kafka.schemaregistry.exceptions.SchemaRegistryInitializationException: Error initializing kafka store while initializing schema registry
	at io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry.init(KafkaSchemaRegistry.java:224)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication.initSchemaRegistry(SchemaRegistryRestApplication.java:66)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication.configureBaseApplication(SchemaRegistryRestApplication.java:81)
	at io.confluent.rest.Application.createServer(Application.java:205)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain.main(SchemaRegistryMain.java:42)
Caused by: io.confluent.kafka.schemaregistry.storage.exceptions.StoreInitializationException: io.confluent.kafka.schemaregistry.storage.exceptions.StoreException: Failed to write Noop record to kafka store.
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.init(KafkaStore.java:142)
	at io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry.init(KafkaSchemaRegistry.java:222)
	... 4 more
Caused by: io.confluent.kafka.schemaregistry.storage.exceptions.StoreException: Failed to write Noop record to kafka store.
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.getLatestOffset(KafkaStore.java:439)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.waitUntilKafkaReaderReachesLastOffset(KafkaStore.java:281)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.init(KafkaStore.java:140)
	... 5 more
Caused by: java.util.concurrent.ExecutionException: org.apache.kafka.common.errors.NotLeaderForPartitionException: This server is not the leader for that topic-partition.
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.valueOrError(FutureRecordMetadata.java:98)
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.get(FutureRecordMetadata.java:81)
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.get(FutureRecordMetadata.java:30)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.getLatestOffset(KafkaStore.java:434)
	... 7 more
Caused by: org.apache.kafka.common.errors.NotLeaderForPartitionException: This server is not the leader for that topic-partition.
[2019-12-07 01:03:43,526] INFO SchemaRegistryConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	avro.compatibility.level = backward
	compression.enable = true
	debug = false
	host.name = kaushik-HP
	idle.timeout.ms = 30000
	inter.instance.headers.whitelist = []
	inter.instance.protocol = http
	kafkastore.bootstrap.servers = []
	kafkastore.connection.url = localhost:2181
	kafkastore.group.id = 
	kafkastore.init.timeout.ms = 60000
	kafkastore.sasl.kerberos.kinit.cmd = /usr/bin/kinit
	kafkastore.sasl.kerberos.min.time.before.relogin = 60000
	kafkastore.sasl.kerberos.service.name = 
	kafkastore.sasl.kerberos.ticket.renew.jitter = 0.05
	kafkastore.sasl.kerberos.ticket.renew.window.factor = 0.8
	kafkastore.sasl.mechanism = GSSAPI
	kafkastore.security.protocol = PLAINTEXT
	kafkastore.ssl.cipher.suites = 
	kafkastore.ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1
	kafkastore.ssl.endpoint.identification.algorithm = 
	kafkastore.ssl.key.password = [hidden]
	kafkastore.ssl.keymanager.algorithm = SunX509
	kafkastore.ssl.keystore.location = 
	kafkastore.ssl.keystore.password = [hidden]
	kafkastore.ssl.keystore.type = JKS
	kafkastore.ssl.protocol = TLS
	kafkastore.ssl.provider = 
	kafkastore.ssl.trustmanager.algorithm = PKIX
	kafkastore.ssl.truststore.location = 
	kafkastore.ssl.truststore.password = [hidden]
	kafkastore.ssl.truststore.type = JKS
	kafkastore.timeout.ms = 500
	kafkastore.topic = _schemas
	kafkastore.topic.replication.factor = 3
	kafkastore.zk.session.timeout.ms = 30000
	listeners = [http://0.0.0.0:9092]
	master.eligibility = true
	metric.reporters = []
	metrics.jmx.prefix = kafka.schema.registry
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	mode.mutability = false
	port = 8081
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.class = []
	resource.extension.classes = []
	resource.static.locations = []
	response.mediatype.default = application/vnd.schemaregistry.v1+json
	response.mediatype.preferred = [application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json]
	rest.servlet.initializor.classes = []
	schema.registry.group.id = schema-registry
	schema.registry.inter.instance.protocol = 
	schema.registry.resource.extension.class = []
	schema.registry.zk.namespace = schema_registry
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
	zookeeper.set.acl = false
 (io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig)
[2019-12-07 01:03:43,560] INFO Logging initialized @400ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log)
[2019-12-07 01:03:44,128] INFO Created schema registry namespace localhost:2181 /schema_registry (io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig)
[2019-12-07 01:03:44,232] INFO Initializing KafkaStore with broker endpoints: PLAINTEXT://kaushik-HP:9092 (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 01:03:44,418] INFO Validating schemas topic _schemas (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 01:03:44,426] WARN The replication factor of the schema topic _schemas is less than the desired one of 3. If this is a production environment, it's crucial to add more brokers and increase the replication factor of the topic. (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 01:03:44,464] INFO Kafka store reader thread starting consumer (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 01:03:44,508] INFO Initialized last consumed offset to -1 (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 01:03:44,509] INFO [kafka-store-reader-thread-_schemas]: Starting (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 01:03:44,587] ERROR Error starting the schema registry (io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication)
io.confluent.kafka.schemaregistry.exceptions.SchemaRegistryInitializationException: Error initializing kafka store while initializing schema registry
	at io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry.init(KafkaSchemaRegistry.java:224)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication.initSchemaRegistry(SchemaRegistryRestApplication.java:66)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication.configureBaseApplication(SchemaRegistryRestApplication.java:81)
	at io.confluent.rest.Application.createServer(Application.java:205)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain.main(SchemaRegistryMain.java:42)
Caused by: io.confluent.kafka.schemaregistry.storage.exceptions.StoreInitializationException: io.confluent.kafka.schemaregistry.storage.exceptions.StoreException: Failed to write Noop record to kafka store.
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.init(KafkaStore.java:142)
	at io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry.init(KafkaSchemaRegistry.java:222)
	... 4 more
Caused by: io.confluent.kafka.schemaregistry.storage.exceptions.StoreException: Failed to write Noop record to kafka store.
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.getLatestOffset(KafkaStore.java:439)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.waitUntilKafkaReaderReachesLastOffset(KafkaStore.java:281)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.init(KafkaStore.java:140)
	... 5 more
Caused by: java.util.concurrent.ExecutionException: org.apache.kafka.common.errors.NotLeaderForPartitionException: This server is not the leader for that topic-partition.
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.valueOrError(FutureRecordMetadata.java:98)
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.get(FutureRecordMetadata.java:81)
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.get(FutureRecordMetadata.java:30)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.getLatestOffset(KafkaStore.java:434)
	... 7 more
Caused by: org.apache.kafka.common.errors.NotLeaderForPartitionException: This server is not the leader for that topic-partition.
[2019-12-07 01:03:58,306] INFO SchemaRegistryConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	avro.compatibility.level = backward
	compression.enable = true
	debug = false
	host.name = kaushik-HP
	idle.timeout.ms = 30000
	inter.instance.headers.whitelist = []
	inter.instance.protocol = http
	kafkastore.bootstrap.servers = []
	kafkastore.connection.url = localhost:2181
	kafkastore.group.id = 
	kafkastore.init.timeout.ms = 60000
	kafkastore.sasl.kerberos.kinit.cmd = /usr/bin/kinit
	kafkastore.sasl.kerberos.min.time.before.relogin = 60000
	kafkastore.sasl.kerberos.service.name = 
	kafkastore.sasl.kerberos.ticket.renew.jitter = 0.05
	kafkastore.sasl.kerberos.ticket.renew.window.factor = 0.8
	kafkastore.sasl.mechanism = GSSAPI
	kafkastore.security.protocol = PLAINTEXT
	kafkastore.ssl.cipher.suites = 
	kafkastore.ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1
	kafkastore.ssl.endpoint.identification.algorithm = 
	kafkastore.ssl.key.password = [hidden]
	kafkastore.ssl.keymanager.algorithm = SunX509
	kafkastore.ssl.keystore.location = 
	kafkastore.ssl.keystore.password = [hidden]
	kafkastore.ssl.keystore.type = JKS
	kafkastore.ssl.protocol = TLS
	kafkastore.ssl.provider = 
	kafkastore.ssl.trustmanager.algorithm = PKIX
	kafkastore.ssl.truststore.location = 
	kafkastore.ssl.truststore.password = [hidden]
	kafkastore.ssl.truststore.type = JKS
	kafkastore.timeout.ms = 500
	kafkastore.topic = _schemas
	kafkastore.topic.replication.factor = 3
	kafkastore.zk.session.timeout.ms = 30000
	listeners = [localhost:9092]
	master.eligibility = true
	metric.reporters = []
	metrics.jmx.prefix = kafka.schema.registry
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	mode.mutability = false
	port = 8081
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.class = []
	resource.extension.classes = []
	resource.static.locations = []
	response.mediatype.default = application/vnd.schemaregistry.v1+json
	response.mediatype.preferred = [application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json]
	rest.servlet.initializor.classes = []
	schema.registry.group.id = schema-registry
	schema.registry.inter.instance.protocol = 
	schema.registry.resource.extension.class = []
	schema.registry.zk.namespace = schema_registry
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
	zookeeper.set.acl = false
 (io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig)
[2019-12-07 01:03:58,339] INFO Logging initialized @395ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log)
[2019-12-07 01:03:58,503] ERROR Server died unexpectedly:  (io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain)
org.apache.kafka.common.config.ConfigException: Found a listener without a port. All listeners must have a port. The listener without a port is: localhost:9092
	at io.confluent.rest.Application.parseListeners(Application.java:627)
	at io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry.getSchemeAndPortForIdentity(KafkaSchemaRegistry.java:201)
	at io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry.<init>(KafkaSchemaRegistry.java:121)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication.initSchemaRegistry(SchemaRegistryRestApplication.java:62)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication.configureBaseApplication(SchemaRegistryRestApplication.java:81)
	at io.confluent.rest.Application.createServer(Application.java:205)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain.main(SchemaRegistryMain.java:42)
[2019-12-07 01:04:07,107] INFO SchemaRegistryConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	avro.compatibility.level = backward
	compression.enable = true
	debug = false
	host.name = kaushik-HP
	idle.timeout.ms = 30000
	inter.instance.headers.whitelist = []
	inter.instance.protocol = http
	kafkastore.bootstrap.servers = []
	kafkastore.connection.url = localhost:2181
	kafkastore.group.id = 
	kafkastore.init.timeout.ms = 60000
	kafkastore.sasl.kerberos.kinit.cmd = /usr/bin/kinit
	kafkastore.sasl.kerberos.min.time.before.relogin = 60000
	kafkastore.sasl.kerberos.service.name = 
	kafkastore.sasl.kerberos.ticket.renew.jitter = 0.05
	kafkastore.sasl.kerberos.ticket.renew.window.factor = 0.8
	kafkastore.sasl.mechanism = GSSAPI
	kafkastore.security.protocol = PLAINTEXT
	kafkastore.ssl.cipher.suites = 
	kafkastore.ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1
	kafkastore.ssl.endpoint.identification.algorithm = 
	kafkastore.ssl.key.password = [hidden]
	kafkastore.ssl.keymanager.algorithm = SunX509
	kafkastore.ssl.keystore.location = 
	kafkastore.ssl.keystore.password = [hidden]
	kafkastore.ssl.keystore.type = JKS
	kafkastore.ssl.protocol = TLS
	kafkastore.ssl.provider = 
	kafkastore.ssl.trustmanager.algorithm = PKIX
	kafkastore.ssl.truststore.location = 
	kafkastore.ssl.truststore.password = [hidden]
	kafkastore.ssl.truststore.type = JKS
	kafkastore.timeout.ms = 500
	kafkastore.topic = _schemas
	kafkastore.topic.replication.factor = 3
	kafkastore.zk.session.timeout.ms = 30000
	listeners = [http://0.0.0.0:8081]
	master.eligibility = true
	metric.reporters = []
	metrics.jmx.prefix = kafka.schema.registry
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	mode.mutability = false
	port = 8081
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.class = []
	resource.extension.classes = []
	resource.static.locations = []
	response.mediatype.default = application/vnd.schemaregistry.v1+json
	response.mediatype.preferred = [application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json]
	rest.servlet.initializor.classes = []
	schema.registry.group.id = schema-registry
	schema.registry.inter.instance.protocol = 
	schema.registry.resource.extension.class = []
	schema.registry.zk.namespace = schema_registry
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
	zookeeper.set.acl = false
 (io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig)
[2019-12-07 01:04:07,142] INFO Logging initialized @390ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log)
[2019-12-07 01:04:07,716] INFO Created schema registry namespace localhost:2181 /schema_registry (io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig)
[2019-12-07 01:04:07,822] INFO Initializing KafkaStore with broker endpoints: PLAINTEXT://kaushik-HP:9092 (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 01:04:08,010] INFO Validating schemas topic _schemas (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 01:04:08,020] WARN The replication factor of the schema topic _schemas is less than the desired one of 3. If this is a production environment, it's crucial to add more brokers and increase the replication factor of the topic. (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 01:04:08,060] INFO Kafka store reader thread starting consumer (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 01:04:08,102] INFO Initialized last consumed offset to -1 (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 01:04:08,103] INFO [kafka-store-reader-thread-_schemas]: Starting (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 01:04:08,333] ERROR Error starting the schema registry (io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication)
io.confluent.kafka.schemaregistry.exceptions.SchemaRegistryInitializationException: Error initializing kafka store while initializing schema registry
	at io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry.init(KafkaSchemaRegistry.java:224)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication.initSchemaRegistry(SchemaRegistryRestApplication.java:66)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication.configureBaseApplication(SchemaRegistryRestApplication.java:81)
	at io.confluent.rest.Application.createServer(Application.java:205)
	at io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain.main(SchemaRegistryMain.java:42)
Caused by: io.confluent.kafka.schemaregistry.storage.exceptions.StoreInitializationException: io.confluent.kafka.schemaregistry.storage.exceptions.StoreException: Failed to write Noop record to kafka store.
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.init(KafkaStore.java:142)
	at io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry.init(KafkaSchemaRegistry.java:222)
	... 4 more
Caused by: io.confluent.kafka.schemaregistry.storage.exceptions.StoreException: Failed to write Noop record to kafka store.
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.getLatestOffset(KafkaStore.java:439)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.waitUntilKafkaReaderReachesLastOffset(KafkaStore.java:281)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.init(KafkaStore.java:140)
	... 5 more
Caused by: java.util.concurrent.ExecutionException: org.apache.kafka.common.errors.NotLeaderForPartitionException: This server is not the leader for that topic-partition.
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.valueOrError(FutureRecordMetadata.java:98)
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.get(FutureRecordMetadata.java:81)
	at org.apache.kafka.clients.producer.internals.FutureRecordMetadata.get(FutureRecordMetadata.java:30)
	at io.confluent.kafka.schemaregistry.storage.KafkaStore.getLatestOffset(KafkaStore.java:434)
	... 7 more
Caused by: org.apache.kafka.common.errors.NotLeaderForPartitionException: This server is not the leader for that topic-partition.
[2019-12-07 01:10:52,517] INFO SchemaRegistryConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	avro.compatibility.level = backward
	compression.enable = true
	debug = false
	host.name = kaushik-HP
	idle.timeout.ms = 30000
	inter.instance.headers.whitelist = []
	inter.instance.protocol = http
	kafkastore.bootstrap.servers = []
	kafkastore.connection.url = localhost:2181
	kafkastore.group.id = 
	kafkastore.init.timeout.ms = 60000
	kafkastore.sasl.kerberos.kinit.cmd = /usr/bin/kinit
	kafkastore.sasl.kerberos.min.time.before.relogin = 60000
	kafkastore.sasl.kerberos.service.name = 
	kafkastore.sasl.kerberos.ticket.renew.jitter = 0.05
	kafkastore.sasl.kerberos.ticket.renew.window.factor = 0.8
	kafkastore.sasl.mechanism = GSSAPI
	kafkastore.security.protocol = PLAINTEXT
	kafkastore.ssl.cipher.suites = 
	kafkastore.ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1
	kafkastore.ssl.endpoint.identification.algorithm = 
	kafkastore.ssl.key.password = [hidden]
	kafkastore.ssl.keymanager.algorithm = SunX509
	kafkastore.ssl.keystore.location = 
	kafkastore.ssl.keystore.password = [hidden]
	kafkastore.ssl.keystore.type = JKS
	kafkastore.ssl.protocol = TLS
	kafkastore.ssl.provider = 
	kafkastore.ssl.trustmanager.algorithm = PKIX
	kafkastore.ssl.truststore.location = 
	kafkastore.ssl.truststore.password = [hidden]
	kafkastore.ssl.truststore.type = JKS
	kafkastore.timeout.ms = 500
	kafkastore.topic = _schemas
	kafkastore.topic.replication.factor = 3
	kafkastore.zk.session.timeout.ms = 30000
	listeners = [http://0.0.0.0:8081]
	master.eligibility = true
	metric.reporters = []
	metrics.jmx.prefix = kafka.schema.registry
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	mode.mutability = false
	port = 8081
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.class = []
	resource.extension.classes = []
	resource.static.locations = []
	response.mediatype.default = application/vnd.schemaregistry.v1+json
	response.mediatype.preferred = [application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json]
	rest.servlet.initializor.classes = []
	schema.registry.group.id = schema-registry
	schema.registry.inter.instance.protocol = 
	schema.registry.resource.extension.class = []
	schema.registry.zk.namespace = schema_registry
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
	zookeeper.set.acl = false
 (io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig)
[2019-12-07 01:10:52,550] INFO Logging initialized @393ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log)
[2019-12-07 01:10:53,143] INFO Created schema registry namespace localhost:2181 /schema_registry (io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig)
[2019-12-07 01:10:53,251] INFO Initializing KafkaStore with broker endpoints: PLAINTEXT://kaushik-HP:9092 (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 01:10:53,441] INFO Validating schemas topic _schemas (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 01:10:53,450] WARN The replication factor of the schema topic _schemas is less than the desired one of 3. If this is a production environment, it's crucial to add more brokers and increase the replication factor of the topic. (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 01:10:53,502] INFO Kafka store reader thread starting consumer (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 01:10:53,546] INFO Initialized last consumed offset to -1 (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 01:10:53,547] INFO [kafka-store-reader-thread-_schemas]: Starting (io.confluent.kafka.schemaregistry.storage.KafkaStoreReaderThread)
[2019-12-07 01:10:53,665] INFO Wait to catch up until the offset of the last message at 0 (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 01:10:53,700] INFO Joining schema registry with Zookeeper-based coordination (io.confluent.kafka.schemaregistry.storage.KafkaSchemaRegistry)
[2019-12-07 01:10:53,716] INFO Successfully elected the new master: {"host":"kaushik-HP","port":8081,"master_eligibility":true,"scheme":"http","version":1} (io.confluent.kafka.schemaregistry.masterelector.zookeeper.ZookeeperMasterElector)
[2019-12-07 01:10:53,729] INFO Wait to catch up until the offset of the last message at 1 (io.confluent.kafka.schemaregistry.storage.KafkaStore)
[2019-12-07 01:10:53,731] INFO Successfully elected the new master: {"host":"kaushik-HP","port":8081,"master_eligibility":true,"scheme":"http","version":1} (io.confluent.kafka.schemaregistry.masterelector.zookeeper.ZookeeperMasterElector)
[2019-12-07 01:10:53,830] INFO Adding listener: http://0.0.0.0:8081 (io.confluent.rest.Application)
[2019-12-07 01:10:54,237] INFO jetty-9.4.18.v20190429; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_222-8u222-b10-1ubuntu1~16.04.1-b10 (org.eclipse.jetty.server.Server)
[2019-12-07 01:10:54,359] INFO DefaultSessionIdManager workerName=node0 (org.eclipse.jetty.server.session)
[2019-12-07 01:10:54,360] INFO No SessionScavenger set, using defaults (org.eclipse.jetty.server.session)
[2019-12-07 01:10:54,365] INFO node0 Scavenging every 600000ms (org.eclipse.jetty.server.session)
[2019-12-07 01:10:54,987] INFO HV000001: Hibernate Validator 5.1.3.Final (org.hibernate.validator.internal.util.Version)
[2019-12-07 01:10:55,134] INFO Started o.e.j.s.ServletContextHandler@40dff0b7{/,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler)
[2019-12-07 01:10:55,147] INFO Started o.e.j.s.ServletContextHandler@53142455{/ws,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler)
[2019-12-07 01:10:55,168] INFO Started NetworkTrafficServerConnector@366ac49b{HTTP/1.1,[http/1.1]}{0.0.0.0:8081} (org.eclipse.jetty.server.AbstractConnector)
[2019-12-07 01:10:55,169] INFO Started @3014ms (org.eclipse.jetty.server.Server)
[2019-12-07 01:10:55,169] INFO Server started, listening for requests... (io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain)
